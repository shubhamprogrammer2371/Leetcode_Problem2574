/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* leftRightDifference(int* nums, int numsSize, int* returnSize){
    int* ans = (int*)malloc(sizeof(int)*numsSize);
    *returnSize = 0;
    int leftsum = 0 , rightsum;
    for(int i = 0 ; i < numsSize ; i++)
    { 
        rightsum = 0;
        for(int z = (i + 1) ; z < numsSize ; z++)
            rightsum += nums[z];
        ans[(*returnSize)++] = abs(leftsum - rightsum);
        leftsum += nums[i];
    }
    return ans;
}


---------------------------------------------------------------------------------------


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* leftRightDifference(int* nums, int numsSize, int* returnSize){
    int *ans=(int*)malloc(sizeof(int)*numsSize);
    int rightsum = 0 , leftsum = 0;
    *returnSize = 0;
    for(int i = 0 ; i < numsSize ; i++)
       leftsum += nums[i];
    for(int i = 0 ; i < numsSize ; i++)
    {
      leftsum -= nums[i];
      ans[(*returnSize)++] = abs(rightsum - leftsum);
      rightsum += nums[i];
    }
    return ans;
}


----------------------------------------------------------------------------------------------


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* leftRightDifference(int* nums, int numsSize, int* returnSize){
    int i, leftSum = 0, rightSum = 0;

    for (i = 0; i < numsSize; i++)
        rightSum += nums[i];
    for (i = 0; i < numsSize; i++) {
        int temp;
        leftSum += temp = nums[i];
        nums[i] = abs(leftSum - rightSum);
        rightSum -= temp;
    }
    *returnSize = numsSize;
    return nums;
}
